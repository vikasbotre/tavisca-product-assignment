{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-0a094c3ab2fb36a3ee9670164d6e47d3",
            "file": "src/app/store/app.states.ts",
            "type": "interface",
            "sourceCode": "import { createFeatureSelector } from '@ngrx/store';\r\nimport * as auth from './reducers/auth.reducers';\r\nimport * as product from './reducers/product.reducers';\r\n\r\nexport interface AppState {\r\n  product: any;\r\n  authState: auth.State;\r\n  productState: product.State;\r\n}\r\n\r\nexport const reducers = {\r\n  auth: auth.reducer,\r\n  product: product.productReducer\r\n};\r\n\r\nexport const selectAuthState = createFeatureSelector<AppState>('auth');\r\nexport const selectMusicState = createFeatureSelector<AppState>('product');\r\n",
            "properties": [
                {
                    "name": "authState",
                    "type": "auth.State",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "product",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "productState",
                    "type": "product.State",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IProduct",
            "id": "interface-IProduct-a32c60705ebffca79287a236ee6b9fcc",
            "file": "src/app/models/product.ts",
            "type": "interface",
            "sourceCode": "export interface IProduct {\r\n  id?: number;\r\n  productName: string;\r\n  productNumber: number;\r\n  productCategory: string;\r\n  productPrice: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "productCategory",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "productName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "productNumber",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "productPrice",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "RouterStateUrl",
            "id": "interface-RouterStateUrl-fae2e617f114986491460f1ec26dda96",
            "file": "src/app/shared/utils.ts",
            "type": "interface",
            "sourceCode": "import { StoreModule, ActionReducerMap } from '@ngrx/store';\r\nimport { Params, RouterStateSnapshot } from '@angular/router';\r\nimport { routerReducer, RouterReducerState, RouterStateSerializer } from '@ngrx/router-store';\r\n\r\nexport interface RouterStateUrl {\r\n  url: string;\r\n  params: Params;\r\n  queryParams: Params;\r\n}\r\n\r\nexport interface State {\r\n  router: RouterReducerState<RouterStateUrl>;\r\n}\r\n\r\nexport class MusicSerializer implements RouterStateSerializer<RouterStateUrl> {\r\n  serialize(routerState: RouterStateSnapshot): RouterStateUrl {\r\n    let route = routerState.root;\r\n    while (route.firstChild) {\r\n      route = route.firstChild;\r\n    }\r\n    const { url, root: { queryParams } } = routerState;\r\n    const { params } = route;\r\n    return { url, params, queryParams };\r\n  }\r\n}\r\n\r\nexport const reducers: ActionReducerMap<State> = {\r\n  router: routerReducer\r\n};\r\n",
            "properties": [
                {
                    "name": "params",
                    "type": "Params",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "queryParams",
                    "type": "Params",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-fae2e617f114986491460f1ec26dda96",
            "file": "src/app/shared/utils.ts",
            "type": "interface",
            "sourceCode": "import { StoreModule, ActionReducerMap } from '@ngrx/store';\r\nimport { Params, RouterStateSnapshot } from '@angular/router';\r\nimport { routerReducer, RouterReducerState, RouterStateSerializer } from '@ngrx/router-store';\r\n\r\nexport interface RouterStateUrl {\r\n  url: string;\r\n  params: Params;\r\n  queryParams: Params;\r\n}\r\n\r\nexport interface State {\r\n  router: RouterReducerState<RouterStateUrl>;\r\n}\r\n\r\nexport class MusicSerializer implements RouterStateSerializer<RouterStateUrl> {\r\n  serialize(routerState: RouterStateSnapshot): RouterStateUrl {\r\n    let route = routerState.root;\r\n    while (route.firstChild) {\r\n      route = route.firstChild;\r\n    }\r\n    const { url, root: { queryParams } } = routerState;\r\n    const { params } = route;\r\n    return { url, params, queryParams };\r\n  }\r\n}\r\n\r\nexport const reducers: ActionReducerMap<State> = {\r\n  router: routerReducer\r\n};\r\n",
            "properties": [
                {
                    "name": "router",
                    "type": "RouterReducerState<RouterStateUrl>",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-628862d7db885a7be30f2d13b03bb21b-1",
            "file": "src/app/store/reducers/auth.reducers.ts",
            "type": "interface",
            "sourceCode": "import { User } from '../../models/user';\r\nimport { All, AuthActionTypes } from '../actions/auth.actions';\r\n\r\nexport interface State {\r\n  errorMessage: string | null;\r\n  isAuthenticated: boolean;\r\n  user: User | null;\r\n}\r\n\r\nexport const initialState: State = {\r\n  errorMessage: null,\r\n  isAuthenticated: false,\r\n  user: null,\r\n};\r\n\r\nexport function reducer(state = initialState, action: All): State {\r\n  switch (action.type) {\r\n    case AuthActionTypes.LOGIN_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isAuthenticated: true,\r\n        user: {\r\n          token: action.payload.token,\r\n          email: action.payload.email,\r\n        },\r\n        errorMessage: null,\r\n      };\r\n    }\r\n    case AuthActionTypes.LOGIN_FAILURE: {\r\n      return {\r\n        ...state,\r\n        errorMessage: 'Incorrect email and/or password.',\r\n      };\r\n    }\r\n    case AuthActionTypes.SIGNUP_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isAuthenticated: true,\r\n        user: {\r\n          token: action.payload.token,\r\n          email: action.payload.email,\r\n        },\r\n        errorMessage: null,\r\n      };\r\n    }\r\n    case AuthActionTypes.LOGOUT: {\r\n      return initialState;\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "isAuthenticated",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "user",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "State-1"
        },
        {
            "name": "State",
            "id": "interface-State-6bff0c3f48aa3f7975bf6b15de43aa6b-2",
            "file": "src/app/store/reducers/product.reducers.ts",
            "type": "interface",
            "sourceCode": "import { IProduct } from '../../models/product';\r\n// tslint:disable-next-line:max-line-length\r\nimport {\r\n  LIST_PRODUCTS,\r\n  LIST_DATA_SUCCESS,\r\n  ProductActions,\r\n  ADD_PRODUCTS,\r\n  UPDATE_PRODUCTS,\r\n  DELETE_PRODUCTS,\r\n  DELETE_PRODUCT_SUCCESS,\r\n  UPDATE_PRODUCT_SUCCESS,\r\n} from '../actions/product.actions';\r\n\r\nexport interface State {\r\n  products: IProduct[];\r\n  user: IProduct | null;\r\n}\r\n\r\nconst initialState: State = {\r\n  products: [],\r\n  user: null,\r\n};\r\n\r\n// tslint:disable-next-line:typedef\r\nexport function productReducer(state = initialState, action: ProductActions) {\r\n  switch (action.type) {\r\n    case LIST_PRODUCTS:\r\n      return {\r\n        ...state,\r\n        products: [...state.products],\r\n      };\r\n    case LIST_DATA_SUCCESS: {\r\n      return {\r\n        products: action.payload,\r\n        message: null,\r\n      };\r\n    }\r\n    case ADD_PRODUCTS: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case UPDATE_PRODUCTS: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case DELETE_PRODUCTS: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n\r\n    case DELETE_PRODUCT_SUCCESS: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case UPDATE_PRODUCT_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        message: 'The product is updated successfully!',\r\n        added: true,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "products",
                    "type": "IProduct[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "user",
                    "type": "IProduct | null",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "State-2"
        }
    ],
    "injectables": [
        {
            "name": "AuthEffects",
            "id": "injectable-AuthEffects-f51cc4c34dabb8f832567c73d9102ca0",
            "file": "src/app/store/effects/auth.effects.ts",
            "properties": [
                {
                    "name": "LogIn",
                    "defaultValue": "this.actions\r\n    .pipe(ofType(AuthActionTypes.LOGIN))\r\n    .pipe(map((action: LogIn) => action.payload))\r\n    .pipe(\r\n      switchMap((payload) => {\r\n        return this.authService\r\n          .logIn(payload.email, payload.password)\r\n          .pipe(\r\n            map((user) => {\r\n              return new LogInSuccess({\r\n                token: user.token,\r\n                email: payload.email,\r\n              });\r\n            })\r\n          )\r\n          .pipe(\r\n            catchError((error) => {\r\n              return of(new LogInFailure({ error }));\r\n            })\r\n          );\r\n      })\r\n    )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "LogInFailure",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGIN_FAILURE)\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "LogInSuccess",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGIN_SUCCESS),\r\n    tap((user) => {\r\n      localStorage.setItem('token', user.payload.token);\r\n      this.router.navigateByUrl('/list-product');\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "LogOut",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGOUT),\r\n    tap((user) => {\r\n      localStorage.removeItem('token');\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 100,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "SignUp",
                    "defaultValue": "this.actions\r\n    .pipe(ofType(AuthActionTypes.SIGNUP))\r\n    .pipe(map((action: SignUp) => action.payload))\r\n    .pipe(\r\n      switchMap((payload) => {\r\n        return this.authService\r\n          .signUp(payload.email, payload.password)\r\n          .pipe(\r\n            map((user) => {\r\n              return new SignUpSuccess({\r\n                token: user.token,\r\n                email: payload.email,\r\n              });\r\n            })\r\n          )\r\n          .pipe(\r\n            catchError((error) => {\r\n              return of(new SignUpFailure({ error }));\r\n            })\r\n          );\r\n      })\r\n    )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "SignUpSuccess",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.SIGNUP_SUCCESS),\r\n    tap((user) => {\r\n      localStorage.setItem('token', user.payload.token);\r\n      this.router.navigateByUrl('/log-in');\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport {\r\n  AuthActionTypes,\r\n  LogIn,\r\n  LogInSuccess,\r\n  LogInFailure,\r\n  SignUp,\r\n  SignUpSuccess,\r\n  SignUpFailure,\r\n  LogOut,\r\n} from '../actions/auth.actions';\r\n\r\n@Injectable()\r\nexport class AuthEffects {\r\n  constructor(\r\n    private actions: Actions,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  @Effect()\r\n  LogIn: Observable<any> = this.actions\r\n    .pipe(ofType(AuthActionTypes.LOGIN))\r\n    .pipe(map((action: LogIn) => action.payload))\r\n    .pipe(\r\n      switchMap((payload) => {\r\n        return this.authService\r\n          .logIn(payload.email, payload.password)\r\n          .pipe(\r\n            map((user) => {\r\n              return new LogInSuccess({\r\n                token: user.token,\r\n                email: payload.email,\r\n              });\r\n            })\r\n          )\r\n          .pipe(\r\n            catchError((error) => {\r\n              return of(new LogInFailure({ error }));\r\n            })\r\n          );\r\n      })\r\n    );\r\n\r\n  @Effect({ dispatch: false })\r\n  LogInSuccess: Observable<any> = this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGIN_SUCCESS),\r\n    tap((user) => {\r\n      localStorage.setItem('token', user.payload.token);\r\n      this.router.navigateByUrl('/list-product');\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  LogInFailure: Observable<any> = this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGIN_FAILURE)\r\n  );\r\n\r\n  @Effect()\r\n  SignUp: Observable<any> = this.actions\r\n    .pipe(ofType(AuthActionTypes.SIGNUP))\r\n    .pipe(map((action: SignUp) => action.payload))\r\n    .pipe(\r\n      switchMap((payload) => {\r\n        return this.authService\r\n          .signUp(payload.email, payload.password)\r\n          .pipe(\r\n            map((user) => {\r\n              return new SignUpSuccess({\r\n                token: user.token,\r\n                email: payload.email,\r\n              });\r\n            })\r\n          )\r\n          .pipe(\r\n            catchError((error) => {\r\n              return of(new SignUpFailure({ error }));\r\n            })\r\n          );\r\n      })\r\n    );\r\n\r\n  @Effect({ dispatch: false })\r\n  SignUpSuccess: Observable<any> = this.actions.pipe(\r\n    ofType(AuthActionTypes.SIGNUP_SUCCESS),\r\n    tap((user) => {\r\n      localStorage.setItem('token', user.payload.token);\r\n      this.router.navigateByUrl('/log-in');\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  public LogOut: Observable<any> = this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGOUT),\r\n    tap((user) => {\r\n      localStorage.removeItem('token');\r\n    })\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions",
                        "type": "Actions"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-cb18fd4e43cc6dc0cd43f2a549391422",
            "file": "src/app/services/auth.service.ts",
            "properties": [
                {
                    "name": "BASE_URL",
                    "defaultValue": "environment.apiUrl",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "httpOptions",
                    "defaultValue": "{\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    }),\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [
                {
                    "name": "createProduct",
                    "args": [
                        {
                            "name": "productName",
                            "type": "string"
                        },
                        {
                            "name": "productNumber",
                            "type": "number"
                        },
                        {
                            "name": "productCategory",
                            "type": "string"
                        },
                        {
                            "name": "productPrice",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IProduct>",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "productName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "productNumber",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "productCategory",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "productPrice",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteProduct",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 76,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "errorHandler",
                    "args": [
                        {
                            "name": "error",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 91,
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllProducts",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IProduct[]>",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "getProductById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IProduct>",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSignUpData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IProduct[]>",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "logIn",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 25,
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateProduct",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        },
                        {
                            "name": "user",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IProduct>",
                    "typeParameters": [],
                    "line": 83,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "user",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { User } from '../models/user';\r\nimport { IProduct } from '../models/product';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n  public BASE_URL = environment.apiUrl;\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    }),\r\n  };\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getToken(): string {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  logIn(email: string, password: string): Observable<any> {\r\n    const url = `${this.BASE_URL}/login`;\r\n    return this.http\r\n      .post<User>(url, { email, password }, this.httpOptions)\r\n      .pipe(catchError(this.errorHandler));\r\n  }\r\n\r\n  signUp(email: string, password: string): Observable<User> {\r\n    const url = `${this.BASE_URL}/register`;\r\n    return this.http\r\n      .post<User>(url, { email, password }, this.httpOptions)\r\n      .pipe(catchError(this.errorHandler));\r\n  }\r\n\r\n  getSignUpData(): Observable<IProduct[]> {\r\n    const url = `${this.BASE_URL}/register`;\r\n    return this.http\r\n      .get<IProduct[]>(url, this.httpOptions)\r\n      .pipe(catchError(this.errorHandler));\r\n  }\r\n\r\n  getAllProducts(): Observable<IProduct[]> {\r\n    const url = `${this.BASE_URL}/products`;\r\n    return this.http\r\n      .get<IProduct[]>(url, this.httpOptions)\r\n      .pipe(catchError(this.errorHandler));\r\n  }\r\n\r\n  getProductById(id: number): Observable<IProduct> {\r\n    const url = `${this.BASE_URL}/products/`;\r\n    return this.http\r\n      .get<IProduct>(url + id, this.httpOptions)\r\n      .pipe(catchError(this.errorHandler));\r\n  }\r\n\r\n  createProduct(\r\n    productName: string,\r\n    productNumber: number,\r\n    productCategory: string,\r\n    productPrice: number\r\n  ): Observable<IProduct> {\r\n    const url = `${this.BASE_URL}/products`;\r\n    return this.http\r\n      .post<IProduct>(\r\n        url,\r\n        { productName, productNumber, productCategory, productPrice },\r\n        this.httpOptions\r\n      )\r\n      .pipe(catchError(this.errorHandler));\r\n  }\r\n\r\n  deleteProduct(id: number): Observable<any> {\r\n    const url = `${this.BASE_URL}/products`;\r\n    return this.http\r\n      .delete(`${this.BASE_URL}/` + 'products/' + id, this.httpOptions)\r\n      .pipe(catchError(this.errorHandler));\r\n  }\r\n\r\n  updateProduct(id, user): Observable<IProduct> {\r\n    const url = `${this.BASE_URL}/products/`;\r\n    return this.http\r\n      .put<IProduct>(url + id, user, this.httpOptions)\r\n      .pipe(catchError(this.errorHandler));\r\n  }\r\n\r\n  // tslint:disable-next-line:typedef\r\n  errorHandler(error) {\r\n    let errorMessage = '';\r\n    if (error.error instanceof ErrorEvent) {\r\n      // Get client-side error\r\n      errorMessage = error.error.message;\r\n    } else {\r\n      // Get server-side error\r\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\r\n    }\r\n    return throwError(errorMessage);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProductEffects",
            "id": "injectable-ProductEffects-b73aa3e5b2c8469c851520f96295c246",
            "file": "src/app/store/effects/product.effects.ts",
            "properties": [
                {
                    "name": "createProducts",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(ADD_PRODUCTS),\r\n    map((action: AddProducts) => action.payload),\r\n    mergeMap((payload) => {\r\n      // tslint:disable-next-line:max-line-length\r\n      return this.authService\r\n        .createProduct(\r\n          payload.productName,\r\n          payload.productNumber,\r\n          payload.productCategory,\r\n          payload.productPrice\r\n        )\r\n        .pipe(\r\n          map((data) => {\r\n            if (data) {\r\n              return new AddSuccess(data);\r\n            }\r\n          })\r\n        );\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "DeleteProduct",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(DELETE_PRODUCTS),\r\n    map((action: DeleteProducts) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.authService.deleteProduct(payload).pipe(\r\n        map((data) => {\r\n          if (data) {\r\n            return new DeleteProductSuccess();\r\n          }\r\n        })\r\n      );\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "ListProducts",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(LIST_PRODUCTS),\r\n    map((action: ListProducts) => action),\r\n    mergeMap((payload) => {\r\n      return this.authService\r\n        .getAllProducts()\r\n        .pipe(map((data) => new ListDataSucess(data)));\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "UpdateProduct",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(UPDATE_PRODUCTS),\r\n    map((action: UpdateProducts) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.authService\r\n        .updateProduct(payload.index, payload.newProduct)\r\n        .pipe(\r\n          map((data) => {\r\n            if (data) {\r\n              return new UpdateProductSuccess(data);\r\n            }\r\n          })\r\n        );\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { map, mergeMap } from 'rxjs/operators';\r\n// tslint:disable-next-line:max-line-length\r\nimport {\r\n  ADD_PRODUCTS,\r\n  AddProducts,\r\n  AddSuccess,\r\n  DELETE_PRODUCTS,\r\n  DeleteProducts,\r\n  DeleteProductSuccess,\r\n  LIST_PRODUCTS,\r\n  ListProducts,\r\n  ListDataSucess,\r\n  UPDATE_PRODUCTS,\r\n  UpdateProducts,\r\n  UpdateProductSuccess,\r\n} from '../actions/product.actions';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../../services/auth.service';\r\n\r\n@Injectable()\r\nexport class ProductEffects {\r\n  constructor(private actions: Actions, private authService: AuthService) {}\r\n\r\n  @Effect({ dispatch: true })\r\n  ListProducts: Observable<any> = this.actions.pipe(\r\n    ofType(LIST_PRODUCTS),\r\n    map((action: ListProducts) => action),\r\n    mergeMap((payload) => {\r\n      return this.authService\r\n        .getAllProducts()\r\n        .pipe(map((data) => new ListDataSucess(data)));\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: true })\r\n  createProducts: Observable<any> = this.actions.pipe(\r\n    ofType(ADD_PRODUCTS),\r\n    map((action: AddProducts) => action.payload),\r\n    mergeMap((payload) => {\r\n      // tslint:disable-next-line:max-line-length\r\n      return this.authService\r\n        .createProduct(\r\n          payload.productName,\r\n          payload.productNumber,\r\n          payload.productCategory,\r\n          payload.productPrice\r\n        )\r\n        .pipe(\r\n          map((data) => {\r\n            if (data) {\r\n              return new AddSuccess(data);\r\n            }\r\n          })\r\n        );\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: true })\r\n  UpdateProduct: Observable<any> = this.actions.pipe(\r\n    ofType(UPDATE_PRODUCTS),\r\n    map((action: UpdateProducts) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.authService\r\n        .updateProduct(payload.index, payload.newProduct)\r\n        .pipe(\r\n          map((data) => {\r\n            if (data) {\r\n              return new UpdateProductSuccess(data);\r\n            }\r\n          })\r\n        );\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: true })\r\n  DeleteProduct: Observable<any> = this.actions.pipe(\r\n    ofType(DELETE_PRODUCTS),\r\n    map((action: DeleteProducts) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.authService.deleteProduct(payload).pipe(\r\n        map((data) => {\r\n          if (data) {\r\n            return new DeleteProductSuccess();\r\n          }\r\n        })\r\n      );\r\n    })\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions",
                        "type": "Actions"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AddProducts",
            "id": "class-AddProducts-00cfe5b98f2bfba63fef9d9105780f15",
            "file": "src/app/store/actions/product.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { IProduct } from '../../models/product';\r\n\r\nexport const ADD_PRODUCTS = '[Products] Add Product';\r\nexport const ADD_DATA_SUCCESS = '[Products] Add Success';\r\nexport const DELETE_PRODUCTS = '[Products] Delete Recipe';\r\nexport const DELETE_PRODUCT_SUCCESS = '[Products] Delete product success';\r\nexport const LIST_PRODUCTS = '[Products] List Fetch';\r\nexport const LIST_DATA_SUCCESS = '[Products] List Success';\r\nexport const UPDATE_PRODUCTS = '[Products] Update Recipe';\r\nexport const UPDATE_PRODUCT_SUCCESS = '[Products] Update product success';\r\n\r\nexport class ListProducts implements Action {\r\n  readonly type = LIST_PRODUCTS;\r\n  // tslint:disable-next-line:typedef\r\n  Product() {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n}\r\n\r\nexport class ListDataSucess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: IProduct[]) {}\r\n}\r\n\r\nexport class AddProducts implements Action {\r\n  readonly type = ADD_PRODUCTS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddSuccess implements Action {\r\n  readonly type = ADD_DATA_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class UpdateProducts implements Action {\r\n  readonly type = UPDATE_PRODUCTS;\r\n  constructor(public payload: { index: number; newProduct: IProduct }) {}\r\n}\r\n\r\nexport class DeleteProducts implements Action {\r\n  readonly type = DELETE_PRODUCTS;\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class UpdateProductSuccess implements Action {\r\n  readonly type = UPDATE_PRODUCT_SUCCESS;\r\n  constructor(public payload: IProduct) {}\r\n}\r\n\r\nexport class DeleteProductSuccess implements Action {\r\n  readonly type = DELETE_PRODUCT_SUCCESS;\r\n}\r\n\r\nexport type ProductActions =\r\n  | ListProducts\r\n  | ListDataSucess\r\n  | AddProducts\r\n  | AddSuccess\r\n  | UpdateProducts\r\n  | DeleteProducts\r\n  | UpdateProductSuccess\r\n  | DeleteProductSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ADD_PRODUCTS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AddSuccess",
            "id": "class-AddSuccess-00cfe5b98f2bfba63fef9d9105780f15",
            "file": "src/app/store/actions/product.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { IProduct } from '../../models/product';\r\n\r\nexport const ADD_PRODUCTS = '[Products] Add Product';\r\nexport const ADD_DATA_SUCCESS = '[Products] Add Success';\r\nexport const DELETE_PRODUCTS = '[Products] Delete Recipe';\r\nexport const DELETE_PRODUCT_SUCCESS = '[Products] Delete product success';\r\nexport const LIST_PRODUCTS = '[Products] List Fetch';\r\nexport const LIST_DATA_SUCCESS = '[Products] List Success';\r\nexport const UPDATE_PRODUCTS = '[Products] Update Recipe';\r\nexport const UPDATE_PRODUCT_SUCCESS = '[Products] Update product success';\r\n\r\nexport class ListProducts implements Action {\r\n  readonly type = LIST_PRODUCTS;\r\n  // tslint:disable-next-line:typedef\r\n  Product() {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n}\r\n\r\nexport class ListDataSucess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: IProduct[]) {}\r\n}\r\n\r\nexport class AddProducts implements Action {\r\n  readonly type = ADD_PRODUCTS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddSuccess implements Action {\r\n  readonly type = ADD_DATA_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class UpdateProducts implements Action {\r\n  readonly type = UPDATE_PRODUCTS;\r\n  constructor(public payload: { index: number; newProduct: IProduct }) {}\r\n}\r\n\r\nexport class DeleteProducts implements Action {\r\n  readonly type = DELETE_PRODUCTS;\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class UpdateProductSuccess implements Action {\r\n  readonly type = UPDATE_PRODUCT_SUCCESS;\r\n  constructor(public payload: IProduct) {}\r\n}\r\n\r\nexport class DeleteProductSuccess implements Action {\r\n  readonly type = DELETE_PRODUCT_SUCCESS;\r\n}\r\n\r\nexport type ProductActions =\r\n  | ListProducts\r\n  | ListDataSucess\r\n  | AddProducts\r\n  | AddSuccess\r\n  | UpdateProducts\r\n  | DeleteProducts\r\n  | UpdateProductSuccess\r\n  | DeleteProductSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ADD_DATA_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DeleteProducts",
            "id": "class-DeleteProducts-00cfe5b98f2bfba63fef9d9105780f15",
            "file": "src/app/store/actions/product.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { IProduct } from '../../models/product';\r\n\r\nexport const ADD_PRODUCTS = '[Products] Add Product';\r\nexport const ADD_DATA_SUCCESS = '[Products] Add Success';\r\nexport const DELETE_PRODUCTS = '[Products] Delete Recipe';\r\nexport const DELETE_PRODUCT_SUCCESS = '[Products] Delete product success';\r\nexport const LIST_PRODUCTS = '[Products] List Fetch';\r\nexport const LIST_DATA_SUCCESS = '[Products] List Success';\r\nexport const UPDATE_PRODUCTS = '[Products] Update Recipe';\r\nexport const UPDATE_PRODUCT_SUCCESS = '[Products] Update product success';\r\n\r\nexport class ListProducts implements Action {\r\n  readonly type = LIST_PRODUCTS;\r\n  // tslint:disable-next-line:typedef\r\n  Product() {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n}\r\n\r\nexport class ListDataSucess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: IProduct[]) {}\r\n}\r\n\r\nexport class AddProducts implements Action {\r\n  readonly type = ADD_PRODUCTS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddSuccess implements Action {\r\n  readonly type = ADD_DATA_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class UpdateProducts implements Action {\r\n  readonly type = UPDATE_PRODUCTS;\r\n  constructor(public payload: { index: number; newProduct: IProduct }) {}\r\n}\r\n\r\nexport class DeleteProducts implements Action {\r\n  readonly type = DELETE_PRODUCTS;\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class UpdateProductSuccess implements Action {\r\n  readonly type = UPDATE_PRODUCT_SUCCESS;\r\n  constructor(public payload: IProduct) {}\r\n}\r\n\r\nexport class DeleteProductSuccess implements Action {\r\n  readonly type = DELETE_PRODUCT_SUCCESS;\r\n}\r\n\r\nexport type ProductActions =\r\n  | ListProducts\r\n  | ListDataSucess\r\n  | AddProducts\r\n  | AddSuccess\r\n  | UpdateProducts\r\n  | DeleteProducts\r\n  | UpdateProductSuccess\r\n  | DeleteProductSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number"
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "DELETE_PRODUCTS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "DeleteProductSuccess",
            "id": "class-DeleteProductSuccess-00cfe5b98f2bfba63fef9d9105780f15",
            "file": "src/app/store/actions/product.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { IProduct } from '../../models/product';\r\n\r\nexport const ADD_PRODUCTS = '[Products] Add Product';\r\nexport const ADD_DATA_SUCCESS = '[Products] Add Success';\r\nexport const DELETE_PRODUCTS = '[Products] Delete Recipe';\r\nexport const DELETE_PRODUCT_SUCCESS = '[Products] Delete product success';\r\nexport const LIST_PRODUCTS = '[Products] List Fetch';\r\nexport const LIST_DATA_SUCCESS = '[Products] List Success';\r\nexport const UPDATE_PRODUCTS = '[Products] Update Recipe';\r\nexport const UPDATE_PRODUCT_SUCCESS = '[Products] Update product success';\r\n\r\nexport class ListProducts implements Action {\r\n  readonly type = LIST_PRODUCTS;\r\n  // tslint:disable-next-line:typedef\r\n  Product() {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n}\r\n\r\nexport class ListDataSucess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: IProduct[]) {}\r\n}\r\n\r\nexport class AddProducts implements Action {\r\n  readonly type = ADD_PRODUCTS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddSuccess implements Action {\r\n  readonly type = ADD_DATA_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class UpdateProducts implements Action {\r\n  readonly type = UPDATE_PRODUCTS;\r\n  constructor(public payload: { index: number; newProduct: IProduct }) {}\r\n}\r\n\r\nexport class DeleteProducts implements Action {\r\n  readonly type = DELETE_PRODUCTS;\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class UpdateProductSuccess implements Action {\r\n  readonly type = UPDATE_PRODUCT_SUCCESS;\r\n  constructor(public payload: IProduct) {}\r\n}\r\n\r\nexport class DeleteProductSuccess implements Action {\r\n  readonly type = DELETE_PRODUCT_SUCCESS;\r\n}\r\n\r\nexport type ProductActions =\r\n  | ListProducts\r\n  | ListDataSucess\r\n  | AddProducts\r\n  | AddSuccess\r\n  | UpdateProducts\r\n  | DeleteProducts\r\n  | UpdateProductSuccess\r\n  | DeleteProductSuccess;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "DELETE_PRODUCT_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ListDataSucess",
            "id": "class-ListDataSucess-00cfe5b98f2bfba63fef9d9105780f15",
            "file": "src/app/store/actions/product.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { IProduct } from '../../models/product';\r\n\r\nexport const ADD_PRODUCTS = '[Products] Add Product';\r\nexport const ADD_DATA_SUCCESS = '[Products] Add Success';\r\nexport const DELETE_PRODUCTS = '[Products] Delete Recipe';\r\nexport const DELETE_PRODUCT_SUCCESS = '[Products] Delete product success';\r\nexport const LIST_PRODUCTS = '[Products] List Fetch';\r\nexport const LIST_DATA_SUCCESS = '[Products] List Success';\r\nexport const UPDATE_PRODUCTS = '[Products] Update Recipe';\r\nexport const UPDATE_PRODUCT_SUCCESS = '[Products] Update product success';\r\n\r\nexport class ListProducts implements Action {\r\n  readonly type = LIST_PRODUCTS;\r\n  // tslint:disable-next-line:typedef\r\n  Product() {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n}\r\n\r\nexport class ListDataSucess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: IProduct[]) {}\r\n}\r\n\r\nexport class AddProducts implements Action {\r\n  readonly type = ADD_PRODUCTS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddSuccess implements Action {\r\n  readonly type = ADD_DATA_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class UpdateProducts implements Action {\r\n  readonly type = UPDATE_PRODUCTS;\r\n  constructor(public payload: { index: number; newProduct: IProduct }) {}\r\n}\r\n\r\nexport class DeleteProducts implements Action {\r\n  readonly type = DELETE_PRODUCTS;\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class UpdateProductSuccess implements Action {\r\n  readonly type = UPDATE_PRODUCT_SUCCESS;\r\n  constructor(public payload: IProduct) {}\r\n}\r\n\r\nexport class DeleteProductSuccess implements Action {\r\n  readonly type = DELETE_PRODUCT_SUCCESS;\r\n}\r\n\r\nexport type ProductActions =\r\n  | ListProducts\r\n  | ListDataSucess\r\n  | AddProducts\r\n  | AddSuccess\r\n  | UpdateProducts\r\n  | DeleteProducts\r\n  | UpdateProductSuccess\r\n  | DeleteProductSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "IProduct[]"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "IProduct[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "IProduct[]",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "LIST_DATA_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ListProducts",
            "id": "class-ListProducts-00cfe5b98f2bfba63fef9d9105780f15",
            "file": "src/app/store/actions/product.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { IProduct } from '../../models/product';\r\n\r\nexport const ADD_PRODUCTS = '[Products] Add Product';\r\nexport const ADD_DATA_SUCCESS = '[Products] Add Success';\r\nexport const DELETE_PRODUCTS = '[Products] Delete Recipe';\r\nexport const DELETE_PRODUCT_SUCCESS = '[Products] Delete product success';\r\nexport const LIST_PRODUCTS = '[Products] List Fetch';\r\nexport const LIST_DATA_SUCCESS = '[Products] List Success';\r\nexport const UPDATE_PRODUCTS = '[Products] Update Recipe';\r\nexport const UPDATE_PRODUCT_SUCCESS = '[Products] Update product success';\r\n\r\nexport class ListProducts implements Action {\r\n  readonly type = LIST_PRODUCTS;\r\n  // tslint:disable-next-line:typedef\r\n  Product() {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n}\r\n\r\nexport class ListDataSucess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: IProduct[]) {}\r\n}\r\n\r\nexport class AddProducts implements Action {\r\n  readonly type = ADD_PRODUCTS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddSuccess implements Action {\r\n  readonly type = ADD_DATA_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class UpdateProducts implements Action {\r\n  readonly type = UPDATE_PRODUCTS;\r\n  constructor(public payload: { index: number; newProduct: IProduct }) {}\r\n}\r\n\r\nexport class DeleteProducts implements Action {\r\n  readonly type = DELETE_PRODUCTS;\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class UpdateProductSuccess implements Action {\r\n  readonly type = UPDATE_PRODUCT_SUCCESS;\r\n  constructor(public payload: IProduct) {}\r\n}\r\n\r\nexport class DeleteProductSuccess implements Action {\r\n  readonly type = DELETE_PRODUCT_SUCCESS;\r\n}\r\n\r\nexport type ProductActions =\r\n  | ListProducts\r\n  | ListDataSucess\r\n  | AddProducts\r\n  | AddSuccess\r\n  | UpdateProducts\r\n  | DeleteProducts\r\n  | UpdateProductSuccess\r\n  | DeleteProductSuccess;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "LIST_PRODUCTS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [
                {
                    "name": "Product",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogIn",
            "id": "class-LogIn-227a9648601d1e62452badfde70ed001",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action, } from '@ngrx/store';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport type All =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | LogOut;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogInFailure",
            "id": "class-LogInFailure-227a9648601d1e62452badfde70ed001",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action, } from '@ngrx/store';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport type All =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | LogOut;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogInSuccess",
            "id": "class-LogInSuccess-227a9648601d1e62452badfde70ed001",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action, } from '@ngrx/store';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport type All =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | LogOut;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogOut",
            "id": "class-LogOut-227a9648601d1e62452badfde70ed001",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action, } from '@ngrx/store';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport type All =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | LogOut;\r\n\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGOUT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "MusicSerializer",
            "id": "class-MusicSerializer-fae2e617f114986491460f1ec26dda96",
            "file": "src/app/shared/utils.ts",
            "type": "class",
            "sourceCode": "import { StoreModule, ActionReducerMap } from '@ngrx/store';\r\nimport { Params, RouterStateSnapshot } from '@angular/router';\r\nimport { routerReducer, RouterReducerState, RouterStateSerializer } from '@ngrx/router-store';\r\n\r\nexport interface RouterStateUrl {\r\n  url: string;\r\n  params: Params;\r\n  queryParams: Params;\r\n}\r\n\r\nexport interface State {\r\n  router: RouterReducerState<RouterStateUrl>;\r\n}\r\n\r\nexport class MusicSerializer implements RouterStateSerializer<RouterStateUrl> {\r\n  serialize(routerState: RouterStateSnapshot): RouterStateUrl {\r\n    let route = routerState.root;\r\n    while (route.firstChild) {\r\n      route = route.firstChild;\r\n    }\r\n    const { url, root: { queryParams } } = routerState;\r\n    const { params } = route;\r\n    return { url, params, queryParams };\r\n  }\r\n}\r\n\r\nexport const reducers: ActionReducerMap<State> = {\r\n  router: routerReducer\r\n};\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "serialize",
                    "args": [
                        {
                            "name": "routerState",
                            "type": "RouterStateSnapshot"
                        }
                    ],
                    "optional": false,
                    "returnType": "RouterStateUrl",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "routerState",
                            "type": "RouterStateSnapshot",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "RouterStateSerializer"
            ]
        },
        {
            "name": "SignUp",
            "id": "class-SignUp-227a9648601d1e62452badfde70ed001",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action, } from '@ngrx/store';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport type All =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | LogOut;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUpFailure",
            "id": "class-SignUpFailure-227a9648601d1e62452badfde70ed001",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action, } from '@ngrx/store';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport type All =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | LogOut;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUpSuccess",
            "id": "class-SignUpSuccess-227a9648601d1e62452badfde70ed001",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action, } from '@ngrx/store';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) { }\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport type All =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | LogOut;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateProducts",
            "id": "class-UpdateProducts-00cfe5b98f2bfba63fef9d9105780f15",
            "file": "src/app/store/actions/product.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { IProduct } from '../../models/product';\r\n\r\nexport const ADD_PRODUCTS = '[Products] Add Product';\r\nexport const ADD_DATA_SUCCESS = '[Products] Add Success';\r\nexport const DELETE_PRODUCTS = '[Products] Delete Recipe';\r\nexport const DELETE_PRODUCT_SUCCESS = '[Products] Delete product success';\r\nexport const LIST_PRODUCTS = '[Products] List Fetch';\r\nexport const LIST_DATA_SUCCESS = '[Products] List Success';\r\nexport const UPDATE_PRODUCTS = '[Products] Update Recipe';\r\nexport const UPDATE_PRODUCT_SUCCESS = '[Products] Update product success';\r\n\r\nexport class ListProducts implements Action {\r\n  readonly type = LIST_PRODUCTS;\r\n  // tslint:disable-next-line:typedef\r\n  Product() {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n}\r\n\r\nexport class ListDataSucess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: IProduct[]) {}\r\n}\r\n\r\nexport class AddProducts implements Action {\r\n  readonly type = ADD_PRODUCTS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddSuccess implements Action {\r\n  readonly type = ADD_DATA_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class UpdateProducts implements Action {\r\n  readonly type = UPDATE_PRODUCTS;\r\n  constructor(public payload: { index: number; newProduct: IProduct }) {}\r\n}\r\n\r\nexport class DeleteProducts implements Action {\r\n  readonly type = DELETE_PRODUCTS;\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class UpdateProductSuccess implements Action {\r\n  readonly type = UPDATE_PRODUCT_SUCCESS;\r\n  constructor(public payload: IProduct) {}\r\n}\r\n\r\nexport class DeleteProductSuccess implements Action {\r\n  readonly type = DELETE_PRODUCT_SUCCESS;\r\n}\r\n\r\nexport type ProductActions =\r\n  | ListProducts\r\n  | ListDataSucess\r\n  | AddProducts\r\n  | AddSuccess\r\n  | UpdateProducts\r\n  | DeleteProducts\r\n  | UpdateProductSuccess\r\n  | DeleteProductSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "UPDATE_PRODUCTS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateProductSuccess",
            "id": "class-UpdateProductSuccess-00cfe5b98f2bfba63fef9d9105780f15",
            "file": "src/app/store/actions/product.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { IProduct } from '../../models/product';\r\n\r\nexport const ADD_PRODUCTS = '[Products] Add Product';\r\nexport const ADD_DATA_SUCCESS = '[Products] Add Success';\r\nexport const DELETE_PRODUCTS = '[Products] Delete Recipe';\r\nexport const DELETE_PRODUCT_SUCCESS = '[Products] Delete product success';\r\nexport const LIST_PRODUCTS = '[Products] List Fetch';\r\nexport const LIST_DATA_SUCCESS = '[Products] List Success';\r\nexport const UPDATE_PRODUCTS = '[Products] Update Recipe';\r\nexport const UPDATE_PRODUCT_SUCCESS = '[Products] Update product success';\r\n\r\nexport class ListProducts implements Action {\r\n  readonly type = LIST_PRODUCTS;\r\n  // tslint:disable-next-line:typedef\r\n  Product() {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n}\r\n\r\nexport class ListDataSucess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: IProduct[]) {}\r\n}\r\n\r\nexport class AddProducts implements Action {\r\n  readonly type = ADD_PRODUCTS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddSuccess implements Action {\r\n  readonly type = ADD_DATA_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class UpdateProducts implements Action {\r\n  readonly type = UPDATE_PRODUCTS;\r\n  constructor(public payload: { index: number; newProduct: IProduct }) {}\r\n}\r\n\r\nexport class DeleteProducts implements Action {\r\n  readonly type = DELETE_PRODUCTS;\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class UpdateProductSuccess implements Action {\r\n  readonly type = UPDATE_PRODUCT_SUCCESS;\r\n  constructor(public payload: IProduct) {}\r\n}\r\n\r\nexport class DeleteProductSuccess implements Action {\r\n  readonly type = DELETE_PRODUCT_SUCCESS;\r\n}\r\n\r\nexport type ProductActions =\r\n  | ListProducts\r\n  | ListDataSucess\r\n  | AddProducts\r\n  | AddSuccess\r\n  | UpdateProducts\r\n  | DeleteProducts\r\n  | UpdateProductSuccess\r\n  | DeleteProductSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "IProduct"
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "IProduct",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "IProduct",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "UPDATE_PRODUCT_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "User",
            "id": "class-User-48b73c6cab43402c080c13b18ffa6dec",
            "file": "src/app/models/user.ts",
            "type": "class",
            "sourceCode": "export class User {\n  id?: string;\n  email?: string;\n  password?: string;\n  token?: string;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "token",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AddProductComponent",
            "id": "component-AddProductComponent-2bab9a820c606e439a3565f77ecc6eff",
            "file": "src/app/components/product/add-product/add-product.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-product",
            "styleUrls": [
                "./add-product.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-product.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "product",
                    "defaultValue": "{\r\n    productName: null,\r\n    productNumber: null,\r\n    productCategory: null,\r\n    productPrice: null,\r\n  }",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AppState } from '../../../store/app.states';\r\nimport { Store } from '@ngrx/store';\r\nimport {\r\n  AddProducts,\r\n  ListProducts,\r\n} from '../../../store/actions/product.actions';\r\n\r\n@Component({\r\n  selector: 'app-add-product',\r\n  templateUrl: './add-product.component.html',\r\n  styleUrls: ['./add-product.component.scss'],\r\n})\r\nexport class AddProductComponent implements OnInit {\r\n  product: any = {\r\n    productName: null,\r\n    productNumber: null,\r\n    productCategory: null,\r\n    productPrice: null,\r\n  };\r\n  addForm: FormGroup;\r\n  constructor(private router: Router, private store: Store<AppState>) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  onSubmit(): void {\r\n    const payload = {\r\n      productName: this.product.productName,\r\n      productNumber: this.product.productNumber,\r\n      productCategory: this.product.productCategory,\r\n      productPrice: this.product.productPrice,\r\n    };\r\n    this.store.dispatch(new AddProducts(payload));\r\n    this.store.dispatch(new ListProducts());\r\n    this.router.navigate(['/list-product']);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./add-product.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"add-product-page\">\n  <h2>Add Product</h2>\n  <form (ngSubmit)=\"onSubmit()\" ngNativeValidate aria-label=\"Add Product Form\">\n    <input type=\"text\" [(ngModel)]=\"product.productName\" name=\"productName\" id=\"productName\" placeholder=\"Enter Product Name\" required autofocus aria-label=\"Product Name Field\">\n    <input type=\"number\" [(ngModel)]=\"product.productNumber\" name=\"productNumber\" id=\"productNumber\" placeholder=\"Enter Product Number\" required aria-label=\"Product Number Field\">\n    <input type=\"text\" [(ngModel)]=\"product.productCategory\" name=\"productCategory\" id=\"productCategory\" placeholder=\"Enter Product Category\" required aria-label=\"Product Category Field\">\n    <input type=\"number\" [(ngModel)]=\"product.productPrice\" name=\"productPrice\" id=\"productPrice\" placeholder=\"Enter Product Price\" required aria-label=\"Product Price Field\">\n    <button class=\"btn btn-login\" type=\"submit\" name=\"submit\" type=\"submit\" value=\"Submit\" aria-label=\"Add Product Button\">Add</button>\n    <button class=\"btn btn-cancel\" [routerLink]=\"['/list-product']\" aria-label=\"Cancel Product Button\">Cancel</button>\n  </form>\n</div>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-66150ead7362968e57fc9dccaa5c4268",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-header></app-header>\n<div class=\"grid-container-main\">\n  <div class=\"item1\">\n    <router-outlet></router-outlet>\n  </div>\n</div>"
        },
        {
            "name": "EditProductComponent",
            "id": "component-EditProductComponent-755a1070fa596603132c3d9c47b691b9",
            "file": "src/app/components/product/edit-product/edit-product.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-product",
            "styleUrls": [
                "./edit-product.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-product.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "editform",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "product",
                    "type": "IProduct",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { Store } from '@ngrx/store';\r\nimport { AuthService } from '../../../services/auth.service';\r\nimport { IProduct } from '../../../models/product';\r\nimport { Observable } from 'rxjs';\r\nimport { AppState, selectMusicState } from '../../../store/app.states';\r\nimport {\r\n  ListProducts,\r\n  UpdateProducts,\r\n} from '../../../store/actions/product.actions';\r\n\r\n@Component({\r\n  selector: 'app-edit-product',\r\n  templateUrl: './edit-product.component.html',\r\n  styleUrls: ['./edit-product.component.scss'],\r\n})\r\nexport class EditProductComponent implements OnInit {\r\n  errorMessage: string | null;\r\n  editform: FormGroup;\r\n  id: number;\r\n  getState: Observable<any>;\r\n  product: IProduct;\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private route: ActivatedRoute,\r\n    private fbs: FormBuilder,\r\n    private store: Store<AppState>,\r\n    private router: Router\r\n  ) {\r\n    this.getState = this.store.select(selectMusicState);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.id = this.route.snapshot.params.productId;\r\n    this.authService.getProductById(this.id).subscribe((data: IProduct) => {\r\n      this.product = data;\r\n    });\r\n\r\n    this.editform = this.fbs.group({\r\n      productName: [''],\r\n      productNumber: [''],\r\n      productCategory: [''],\r\n      productPrice: [''],\r\n    });\r\n\r\n    this.authService.getProductById(this.id).subscribe((data) => {\r\n      this.editform.setValue(data);\r\n    });\r\n  }\r\n\r\n  submit(): void {\r\n    const payload = {\r\n      index: this.id,\r\n      newProduct: this.editform.value,\r\n    };\r\n    this.store.dispatch(new UpdateProducts(payload));\r\n    this.store.dispatch(new ListProducts());\r\n    this.router.navigateByUrl('/list-product');\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./edit-product.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "fbs",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fbs",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"edit-product-page\">\n    <h2>Edit Product</h2>\n    <form [formGroup]=\"editform\" (ngSubmit)=\"submit()\" ngNativeValidate aria-label=\"Edit Product Form\">\n        <input type=\"text\" name=\"productName\" id=\"productName\" formControlName=\"productName\" required placeholder=\"Add Product Name\" aria-label=\"Add Product Field\">\n        <input type=\"number\" name=\"productNumber\" id=\"productNumber\" formControlName=\"productNumber\" required placeholder=\"Add Product Number\" aria-label=\"Add Product Number\">\n        <input type=\"text\" name=\"productCategory\" id=\"productCategory\" formControlName=\"productCategory\" required placeholder=\"Add Product Category\" aria-label=\"Add Product Category\">\n        <input type=\"number\" name=\"productPrice\" id=\"productPrice\" formControlName=\"productPrice\" required placeholder=\"Add Product Price\" aria-label=\"Add Product Price\">\n        <button class=\"btn btn-login\" type=\"submit\" [disabled]=\"!editform.valid\" value=\"Submit\" aria-label=\"Edit Product Button\">Edit</button>\n        <button class=\"btn btn-cancel\" [routerLink]=\"['/list-product']\" aria-label=\"Cancel Product Button\">Cancel</button>\n    </form>\n</div>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-97811a820ac1302d682614ecb39314e4",
            "file": "src/app/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "editMode",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isAuthenticated",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "showColor",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "logOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, OnInit, Renderer2 } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState, selectAuthState } from '../store/app.states';\r\nimport { Observable } from 'rxjs';\r\nimport { LogOut } from '../store/actions/auth.actions';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.scss'],\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n  editMode = false;\r\n  errorMessage = null;\r\n  getState: Observable<any>;\r\n  isAuthenticated = false;\r\n  showColor = false;\r\n  user = null;\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private renderer: Renderer2,\r\n    private router: Router,\r\n    private store: Store<AppState>\r\n  ) {\r\n    this.getState = this.store.select(selectAuthState);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.editMode = true;\r\n    this.getState.subscribe((state) => {\r\n      this.isAuthenticated = state.isAuthenticated;\r\n      this.user = state.user;\r\n      this.errorMessage = state.errorMessage;\r\n    });\r\n  }\r\n\r\n  toggle(): void {\r\n    this.showColor = !this.showColor;\r\n    if (this.showColor) {\r\n      this.renderer.setStyle(\r\n        this.el.nativeElement.ownerDocument.body,\r\n        'backgroundColor',\r\n        'rgb(216 207 99 / 45%)'\r\n      );\r\n    } else {\r\n      this.renderer.setStyle(\r\n        this.el.nativeElement.ownerDocument.body,\r\n        'backgroundColor',\r\n        'rgb(195 202 218 / 59%)'\r\n      );\r\n    }\r\n  }\r\n\r\n  public logOut(): void {\r\n    this.store.dispatch(new LogOut());\r\n    this.router.navigate(['/log-in']);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"grid-container-header\">\n  <div class=\"item-1\">\n    <button class=\"btn\" (click)=\"toggle()\" aria-label=\"Change Theme Button\">Change Theme</button>\n  </div>\n  <div class=\"item-2\">\n    <button class=\"btn\" routerLink=\"/product-list\" *ngIf=\"isAuthenticated == false\" aria-label=\"Product List Theme Button\">Product List</button>\n  </div>\n  <div class=\"item-3\" *ngIf=\"isAuthenticated == false\">\n    <button class=\"btn\" routerLink=\"/log-in\" aria-label=\"Login Button\">Login</button>\n  </div>\n  <div class=\"item-4\" *ngIf=\"isAuthenticated == false\">\n    <button class=\"btn\" routerLink=\"/sign-up\" aria-label=\"Signup Button\">Signup</button>\n  </div>\n  <div class=\"item-5\" *ngIf=\"isAuthenticated == true\" aria-label=\"Logout Button\">\n    <button class=\"btn\" (click)=\"logOut()\">Logout</button>\n  </div>\n</div>"
        },
        {
            "name": "LandingComponent",
            "id": "component-LandingComponent-5bc0d9c094d1b42e2d37d202988badd5",
            "file": "src/app/components/landing/landing.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-landing",
            "styleUrls": [
                "./landing.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./landing.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isAuthenticated",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "products",
                    "type": "IProduct[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "logOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { IProduct } from '../../models/product';\r\nimport { AppState, selectAuthState } from '../../store/app.states';\r\nimport { LogOut } from '../../store/actions/auth.actions';\r\n\r\n@Component({\r\n  selector: 'app-landing',\r\n  templateUrl: './landing.component.html',\r\n  styleUrls: ['./landing.component.scss'],\r\n})\r\nexport class LandingComponent implements OnInit {\r\n  errorMessage = null;\r\n  getState: Observable<any>;\r\n  isAuthenticated: false;\r\n  products: IProduct[];\r\n  user = null;\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private store: Store<AppState>\r\n  ) {\r\n    this.getState = this.store.select(selectAuthState);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getState.subscribe((state) => {\r\n      this.isAuthenticated = state.isAuthenticated;\r\n      this.user = state.user;\r\n      this.errorMessage = state.errorMessage;\r\n    });\r\n\r\n    this.authService.getAllProducts().subscribe((data) => {\r\n      this.products = data;\r\n    });\r\n  }\r\n\r\n  logOut(): void {\r\n    // tslint:disable-next-line:new-parens\r\n    this.store.dispatch(new LogOut());\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./landing.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2 class=\"m-l-26\">Product List</h2>\n<div class=\"grid-container-list\">\n  <div class=\"grid-item\" *ngFor=\"let product of products\">\n    <div class=\"texts\">\n      <h5>Product Name: {{ product.productName }}</h5>\n      <h6>Product Number: {{product.productNumber}}</h6>\n      <h6>Product Category: {{ product.productCategory }}</h6>\n      <h6>Product Price: {{product.productPrice}}</h6>\n    </div>\n  </div>\n</div>"
        },
        {
            "name": "ListProductComponent",
            "id": "component-ListProductComponent-c212d3ca35616e98d070ae9bc99c7869",
            "file": "src/app/components/product/list-product/list-product.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-list-product",
            "styleUrls": [
                "./list-product.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-product.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isUpdateActivated",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "products",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteMusic",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "showUpdateForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from '../../../services/auth.service';\r\nimport { AppState, selectMusicState } from '../../../store/app.states';\r\nimport { Store } from '@ngrx/store';\r\nimport { ListProducts } from '../../../store/actions/product.actions';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-list-product',\r\n  templateUrl: './list-product.component.html',\r\n  styleUrls: ['./list-product.component.scss'],\r\n})\r\nexport class ListProductComponent implements OnInit {\r\n  errorMessage: string | null;\r\n  getState: Observable<any>;\r\n  isUpdateActivated = false;\r\n  products: any;\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private store: Store<AppState>\r\n  ) {\r\n    this.getState = this.store.select(selectMusicState);\r\n  }\r\n  showUpdateForm(): void {\r\n    this.isUpdateActivated = true;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.store.dispatch(new ListProducts());\r\n    this.store.subscribe((data) => {\r\n      this.products = data.product.products;\r\n    });\r\n  }\r\n\r\n  deleteMusic(id: number): void {\r\n    this.authService.deleteProduct(id).subscribe((res) => {\r\n      this.products = this.products.filter((item) => item.id !== id);\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./list-product.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2 class=\"m-l-26\">Product List</h2>\n<button type=\"button\" class=\"btn m-b-16 m-l-26\" [routerLink]=\"['/add-product']\" aria-label=\"Create Product Button\">Create Product</button>\n\n<div class=\"grid-container-list\">\n    <div class=\"grid-item\" *ngFor=\"let product of products\">\n        <div class=\"texts\">\n            <h5>Product Name:{{ product.productName }}</h5>\n            <h6>Product Number:{{product.productNumber}}</h6>\n            <h6>Product Category: {{ product.productCategory }}</h6>\n            <h6>Product Price: {{product.productPrice}}</h6>\n        </div>\n        <div class=\"buttons m-t-16 m-l-6\">\n            <button type=\"button\" class=\"btn edit m-r-10\" href=\"#\" [routerLink]=\"['/edit-product/', product.id]\" aria-label=\"Edit Product Button\">Edit</button>\n            <button type=\"button\" class=\"btn delete\" (click)=\"deleteMusic(product.id)\" value=\"Delete\" aria-label=\"Delete Product Button\">Delete</button>\n        </div>\n    </div>\n</div>"
        },
        {
            "name": "LogInComponent",
            "id": "component-LogInComponent-f6bde92c1d06f07e3172f3a578019a96",
            "file": "src/app/components/log-in/log-in.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-log-in",
            "styleUrls": [
                "./log-in.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./log-in.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allSignupData",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "incorrectError",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "user",
                    "defaultValue": "new User()",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { User } from '../../models/user';\r\nimport { AppState, selectAuthState } from '../../store/app.states';\r\nimport { LogIn } from '../../store/actions/auth.actions';\r\nimport { AuthService } from '../../services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-log-in',\r\n  templateUrl: './log-in.component.html',\r\n  styleUrls: ['./log-in.component.scss'],\r\n})\r\nexport class LogInComponent implements OnInit {\r\n  allSignupData: any;\r\n  errorMessage: string | null;\r\n  incorrectError = false;\r\n  getState: Observable<any>;\r\n  user: User = new User();\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private store: Store<AppState>\r\n  ) {\r\n    this.getState = this.store.select(selectAuthState);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getState.subscribe((state) => {\r\n      this.errorMessage = state.errorMessage;\r\n    });\r\n  }\r\n\r\n  onSubmit(): void {\r\n    // Check user registaer code\r\n    this.authService.getSignUpData().subscribe((response) => {\r\n      this.allSignupData = response;\r\n      // checks whether an element is even\r\n      const even = (item: any) =>\r\n        this.user.email === item.email && this.user.password === item.password;\r\n      if (this.allSignupData.some(even) === true) {\r\n        const payload = {\r\n          email: this.user.email,\r\n          password: this.user.password,\r\n        };\r\n        this.store.dispatch(new LogIn(payload));\r\n      } else {\r\n        this.incorrectError = true;\r\n        setTimeout(() => {\r\n          this.incorrectError = false;\r\n        }, 3000);\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./log-in.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"login-page\">\n  <h2>Login To Your Account</h2>\n  <form (ngSubmit)=\"onSubmit()\" ngNativeValidate aria-label=\"Username field of login\">\n    <div *ngIf=\"incorrectError\" class=\"login-error m-b-10\">Username or password is incorrect.</div>\n    <input [(ngModel)]=\"user.email\" name=\"email\" type=\"email\" required id=\"email\" placeholder=\"Email\" aria-label=\"Username field of login\">\n    <input [(ngModel)]=\"user.password\" name=\"password\" type=\"password\" required id=\"password\" placeholder=\"Password\" aria-label=\"Passworld field of login\">\n    <button class=\"btn btn-login\" type=\"submit\" value=\"Log in\" aria-label=\"Login button\">Login</button>\n    <button class=\"btn btn-cancel\" [routerLink]=\"['/home']\" type=\"submit\" aria-label=\"Cancel button\">Cancel</button>\n  </form>\n</div>"
        },
        {
            "name": "SignUpComponent",
            "id": "component-SignUpComponent-b1da4620ba75e52f398baaf0450cc09b",
            "file": "src/app/components/sign-up/sign-up.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sign-up",
            "styleUrls": [
                "./sign-up.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-up.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "user",
                    "defaultValue": "new User()",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { User } from '../../models/user';\r\nimport { AppState, selectAuthState } from '../../store/app.states';\r\nimport { SignUp } from '../../store/actions/auth.actions';\r\n\r\n@Component({\r\n  selector: 'app-sign-up',\r\n  templateUrl: './sign-up.component.html',\r\n  styleUrls: ['./sign-up.component.scss'],\r\n})\r\nexport class SignUpComponent implements OnInit {\r\n  getState: Observable<any>;\r\n  errorMessage: string | null;\r\n  user: User = new User();\r\n\r\n  constructor(private store: Store<AppState>) {\r\n    this.getState = this.store.select(selectAuthState);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getState.subscribe((state) => {\r\n      this.errorMessage = state.errorMessage;\r\n    });\r\n  }\r\n\r\n  onSubmit(): void {\r\n    const payload = {\r\n      email: this.user.email,\r\n      password: this.user.password,\r\n    };\r\n    this.store.dispatch(new SignUp(payload));\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./sign-up.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"signup-page\">\n  <h2>Registration</h2>\n  <form (ngSubmit)=\"onSubmit()\" ngNativeValidate aria-label=\"Signup form\">\n    <input [(ngModel)]=\"user.email\" name=\"email\" type=\"email\" required placeholder=\"UserName\" id=\"email\" aria-label=\"UserName Field Of Signup\">\n    <input [(ngModel)]=\"user.password\" name=\"password\" type=\"password\" required id=\"password\" placeholder=\"Email\" aria-label=\"Password Field Of Signup\">\n    <button class=\"btn btn-login\" type=\"submit\" value=\"SignUp\">Signup</button>\n    <button class=\"btn btn-cancel\" [routerLink]=\"['/']\">Cancel</button>\n    <p>\n      <span>Already have an account?&nbsp;</span>\n      <a [routerLink]=\"['/log-in']\">Log in!</a>\n    </p>\n  </form>\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddProductComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "EditProductComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "LandingComponent"
                        },
                        {
                            "name": "ListProductComponent"
                        },
                        {
                            "name": "LogInComponent"
                        },
                        {
                            "name": "SignUpComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ADD_DATA_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/product.actions.ts",
                "type": "string",
                "defaultValue": "'[Products] Add Success'"
            },
            {
                "name": "ADD_PRODUCTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/product.actions.ts",
                "type": "string",
                "defaultValue": "'[Products] Add Product'"
            },
            {
                "name": "App",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/header/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/landing/landing.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/log-in/log-in.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/sign-up/sign-up.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/product/add-product/add-product.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/product/edit-product/edit-product.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/product/list-product/list-product.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DELETE_PRODUCT_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/product.actions.ts",
                "type": "string",
                "defaultValue": "'[Products] Delete product success'"
            },
            {
                "name": "DELETE_PRODUCTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/product.actions.ts",
                "type": "string",
                "defaultValue": "'[Products] Delete Recipe'"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  apiUrl: 'http://localhost:3000',\r\n  production: false,\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/auth.reducers.ts",
                "type": "State",
                "defaultValue": "{\r\n  errorMessage: null,\r\n  isAuthenticated: false,\r\n  user: null,\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/product.reducers.ts",
                "type": "State",
                "defaultValue": "{\r\n  products: [],\r\n  user: null,\r\n}"
            },
            {
                "name": "LIST_DATA_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/product.actions.ts",
                "type": "string",
                "defaultValue": "'[Products] List Success'"
            },
            {
                "name": "LIST_PRODUCTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/product.actions.ts",
                "type": "string",
                "defaultValue": "'[Products] List Fetch'"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utils.ts",
                "type": "ActionReducerMap<State>",
                "defaultValue": "{\r\n  router: routerReducer\r\n}"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.states.ts",
                "type": "object",
                "defaultValue": "{\r\n  auth: auth.reducer,\r\n  product: product.productReducer\r\n}"
            },
            {
                "name": "selectAuthState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.states.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<AppState>('auth')"
            },
            {
                "name": "selectMusicState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.states.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<AppState>('product')"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.stories.ts",
                "type": "Story<AppComponent>",
                "defaultValue": "(args: AppComponent) => ({\r\n  component: AppComponent,\r\n  moduleMetadata: {\r\n    declarations: [\r\n      AppComponent,\r\n      LandingComponent,\r\n      SignUpComponent,\r\n      LogInComponent,\r\n      HeaderComponent,\r\n      AddProductComponent,\r\n      EditProductComponent,\r\n      ListProductComponent,\r\n    ],\r\n    imports: [\r\n      BrowserModule,\r\n      CommonModule,\r\n      FormsModule,\r\n      EffectsModule.forRoot([]),\r\n      EffectsModule.forFeature([AuthEffects, ProductEffects]),\r\n      HttpClientModule,\r\n      ReactiveFormsModule,\r\n      RouterModule.forRoot([\r\n        { path: 'log-in', component: LogInComponent },\r\n        { path: 'sign-up', component: SignUpComponent },\r\n        { path: '', component: LandingComponent },\r\n        { path: 'add-product', component: AddProductComponent },\r\n        { path: 'list-product', component: ListProductComponent },\r\n        { path: 'edit-product/:productId', component: EditProductComponent },\r\n        { path: '**', redirectTo: '/' },\r\n      ]),\r\n      StoreModule.forRoot(reducers, {}),\r\n    ],\r\n    providers: [Store, AuthService, { provide: APP_BASE_HREF, useValue: '/' }],\r\n    schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n  },\r\n  props: { args },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/header/Header.stories.ts",
                "type": "Story<HeaderComponent>",
                "defaultValue": "(args: HeaderComponent) => ({\r\n  component: HeaderComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/landing/landing.stories.ts",
                "type": "Story<LandingComponent>",
                "defaultValue": "(args: LandingComponent) => ({\r\n  component: LandingComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/log-in/log-in.stories.ts",
                "type": "Story<LogInComponent>",
                "defaultValue": "(args: LogInComponent) => ({\r\n  component: LogInComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/sign-up/sign-up.stories.ts",
                "type": "Story<SignUpComponent>",
                "defaultValue": "(args: SignUpComponent) => ({\r\n  component: SignUpComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/product/add-product/add-product.stories.ts",
                "type": "Story<AddProductComponent>",
                "defaultValue": "(args: AddProductComponent) => ({\r\n  component: AddProductComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/product/edit-product/edit-product.stories.ts",
                "type": "Story<EditProductComponent>",
                "defaultValue": "(args: EditProductComponent) => ({\r\n  component: EditProductComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/product/list-product/list-product.stories.ts",
                "type": "Story<ListProductComponent>",
                "defaultValue": "(args: ListProductComponent) => ({\r\n  component: ListProductComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "UPDATE_PRODUCT_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/product.actions.ts",
                "type": "string",
                "defaultValue": "'[Products] Update product success'"
            },
            {
                "name": "UPDATE_PRODUCTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/product.actions.ts",
                "type": "string",
                "defaultValue": "'[Products] Update Recipe'"
            }
        ],
        "functions": [
            {
                "name": "productReducer",
                "file": "src/app/store/reducers/product.reducers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/store/reducers/auth.reducers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "All",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure | LogOut",
                "file": "src/app/store/actions/auth.actions.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "ProductActions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ListProducts | ListDataSucess | AddProducts | AddSuccess | UpdateProducts | DeleteProducts | UpdateProductSuccess | DeleteProductSuccess",
                "file": "src/app/store/actions/product.actions.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "AuthActionTypes",
                "childs": [
                    {
                        "name": "LOGIN",
                        "value": "[Auth] Login"
                    },
                    {
                        "name": "LOGIN_SUCCESS",
                        "value": "[Auth] Login Success"
                    },
                    {
                        "name": "LOGIN_FAILURE",
                        "value": "[Auth] Login Failure"
                    },
                    {
                        "name": "SIGNUP",
                        "value": "[Auth] Signup"
                    },
                    {
                        "name": "SIGNUP_SUCCESS",
                        "value": "[Auth] Signup Success"
                    },
                    {
                        "name": "SIGNUP_FAILURE",
                        "value": "[Auth] Signup Failure"
                    },
                    {
                        "name": "LOGOUT",
                        "value": "[Auth] Logout"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/actions/auth.actions.ts"
            }
        ],
        "groupedVariables": {
            "src/app/store/actions/product.actions.ts": [
                {
                    "name": "ADD_DATA_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/product.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Products] Add Success'"
                },
                {
                    "name": "ADD_PRODUCTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/product.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Products] Add Product'"
                },
                {
                    "name": "DELETE_PRODUCT_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/product.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Products] Delete product success'"
                },
                {
                    "name": "DELETE_PRODUCTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/product.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Products] Delete Recipe'"
                },
                {
                    "name": "LIST_DATA_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/product.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Products] List Success'"
                },
                {
                    "name": "LIST_PRODUCTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/product.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Products] List Fetch'"
                },
                {
                    "name": "UPDATE_PRODUCT_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/product.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Products] Update product success'"
                },
                {
                    "name": "UPDATE_PRODUCTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/product.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Products] Update Recipe'"
                }
            ],
            "src/app/app.stories.ts": [
                {
                    "name": "App",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.stories.ts",
                    "type": "Story<AppComponent>",
                    "defaultValue": "(args: AppComponent) => ({\r\n  component: AppComponent,\r\n  moduleMetadata: {\r\n    declarations: [\r\n      AppComponent,\r\n      LandingComponent,\r\n      SignUpComponent,\r\n      LogInComponent,\r\n      HeaderComponent,\r\n      AddProductComponent,\r\n      EditProductComponent,\r\n      ListProductComponent,\r\n    ],\r\n    imports: [\r\n      BrowserModule,\r\n      CommonModule,\r\n      FormsModule,\r\n      EffectsModule.forRoot([]),\r\n      EffectsModule.forFeature([AuthEffects, ProductEffects]),\r\n      HttpClientModule,\r\n      ReactiveFormsModule,\r\n      RouterModule.forRoot([\r\n        { path: 'log-in', component: LogInComponent },\r\n        { path: 'sign-up', component: SignUpComponent },\r\n        { path: '', component: LandingComponent },\r\n        { path: 'add-product', component: AddProductComponent },\r\n        { path: 'list-product', component: ListProductComponent },\r\n        { path: 'edit-product/:productId', component: EditProductComponent },\r\n        { path: '**', redirectTo: '/' },\r\n      ]),\r\n      StoreModule.forRoot(reducers, {}),\r\n    ],\r\n    providers: [Store, AuthService, { provide: APP_BASE_HREF, useValue: '/' }],\r\n    schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n  },\r\n  props: { args },\r\n})"
                }
            ],
            "src/app/header/Header.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/header/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/header/Header.stories.ts",
                    "type": "Story<HeaderComponent>",
                    "defaultValue": "(args: HeaderComponent) => ({\r\n  component: HeaderComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/components/landing/landing.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/landing/landing.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/landing/landing.stories.ts",
                    "type": "Story<LandingComponent>",
                    "defaultValue": "(args: LandingComponent) => ({\r\n  component: LandingComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/components/log-in/log-in.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/log-in/log-in.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/log-in/log-in.stories.ts",
                    "type": "Story<LogInComponent>",
                    "defaultValue": "(args: LogInComponent) => ({\r\n  component: LogInComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/components/sign-up/sign-up.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/sign-up/sign-up.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/sign-up/sign-up.stories.ts",
                    "type": "Story<SignUpComponent>",
                    "defaultValue": "(args: SignUpComponent) => ({\r\n  component: SignUpComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/components/product/add-product/add-product.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/product/add-product/add-product.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/product/add-product/add-product.stories.ts",
                    "type": "Story<AddProductComponent>",
                    "defaultValue": "(args: AddProductComponent) => ({\r\n  component: AddProductComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/components/product/edit-product/edit-product.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/product/edit-product/edit-product.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/product/edit-product/edit-product.stories.ts",
                    "type": "Story<EditProductComponent>",
                    "defaultValue": "(args: EditProductComponent) => ({\r\n  component: EditProductComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/components/product/list-product/list-product.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/product/list-product/list-product.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/product/list-product/list-product.stories.ts",
                    "type": "Story<ListProductComponent>",
                    "defaultValue": "(args: ListProductComponent) => ({\r\n  component: ListProductComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  apiUrl: 'http://localhost:3000',\r\n  production: false,\r\n}"
                }
            ],
            "src/app/store/reducers/auth.reducers.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/auth.reducers.ts",
                    "type": "State",
                    "defaultValue": "{\r\n  errorMessage: null,\r\n  isAuthenticated: false,\r\n  user: null,\r\n}"
                }
            ],
            "src/app/store/reducers/product.reducers.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/product.reducers.ts",
                    "type": "State",
                    "defaultValue": "{\r\n  products: [],\r\n  user: null,\r\n}"
                }
            ],
            "src/app/shared/utils.ts": [
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utils.ts",
                    "type": "ActionReducerMap<State>",
                    "defaultValue": "{\r\n  router: routerReducer\r\n}"
                }
            ],
            "src/app/store/app.states.ts": [
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.states.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  auth: auth.reducer,\r\n  product: product.productReducer\r\n}"
                },
                {
                    "name": "selectAuthState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.states.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AppState>('auth')"
                },
                {
                    "name": "selectMusicState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.states.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AppState>('product')"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/store/reducers/product.reducers.ts": [
                {
                    "name": "productReducer",
                    "file": "src/app/store/reducers/product.reducers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/store/reducers/auth.reducers.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/store/reducers/auth.reducers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/store/actions/auth.actions.ts": [
                {
                    "name": "AuthActionTypes",
                    "childs": [
                        {
                            "name": "LOGIN",
                            "value": "[Auth] Login"
                        },
                        {
                            "name": "LOGIN_SUCCESS",
                            "value": "[Auth] Login Success"
                        },
                        {
                            "name": "LOGIN_FAILURE",
                            "value": "[Auth] Login Failure"
                        },
                        {
                            "name": "SIGNUP",
                            "value": "[Auth] Signup"
                        },
                        {
                            "name": "SIGNUP_SUCCESS",
                            "value": "[Auth] Signup Success"
                        },
                        {
                            "name": "SIGNUP_FAILURE",
                            "value": "[Auth] Signup Failure"
                        },
                        {
                            "name": "LOGOUT",
                            "value": "[Auth] Logout"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/actions/auth.actions.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/store/actions/auth.actions.ts": [
                {
                    "name": "All",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure | LogOut",
                    "file": "src/app/store/actions/auth.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/store/actions/product.actions.ts": [
                {
                    "name": "ProductActions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ListProducts | ListDataSucess | AddProducts | AddSuccess | UpdateProducts | DeleteProducts | UpdateProductSuccess | DeleteProductSuccess",
                    "file": "src/app/store/actions/product.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "App",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/landing/landing.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LandingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/landing/landing.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/landing/landing.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/log-in/log-in.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogInComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/log-in/log-in.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/log-in/log-in.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/product/add-product/add-product.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddProductComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/product/add-product/add-product.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/product/add-product/add-product.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/product/edit-product/edit-product.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditProductComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/product/edit-product/edit-product.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/product/edit-product/edit-product.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/product/list-product/list-product.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListProductComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/product/list-product/list-product.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/product/list-product/list-product.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/sign-up/sign-up.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignUpComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/sign-up/sign-up.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/sign-up/sign-up.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/header/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/header/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/models/product.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IProduct",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/user.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MusicSerializer",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RouterStateUrl",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogIn",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogInFailure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogInSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogOut",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUp",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUpFailure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUpSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/product.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddProducts",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/product.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/product.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteProducts",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/product.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteProductSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/product.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ListDataSucess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/product.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ListProducts",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/product.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateProducts",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/product.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateProductSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_DATA_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_PRODUCTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_PRODUCT_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_PRODUCTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LIST_DATA_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LIST_PRODUCTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE_PRODUCT_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE_PRODUCTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMusicState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/auth.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthEffects",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/product.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductEffects",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/product.reducers.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/product.reducers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "productReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/product.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}